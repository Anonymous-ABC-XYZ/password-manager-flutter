import 'dart:math';import 'package:dio/dio.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:google_fonts/google_fonts.dart';import 'package:sqflite/sqflite.dart';import 'color-schemes.dart';import 'package:animated_button/animated_button.dart';import 'package:path_provider/path_provider.dart';import 'package:sqflite_common_ffi/sqflite_ffi.dart';import 'package:fuzzywuzzy/fuzzywuzzy.dart';Future main() async {  sqfliteFfiInit();  databaseFactory = databaseFactoryFfi;  ErrorWidget.builder = (FlutterErrorDetails details) {    return Container(color: Colors.transparent);  };  runApp(const MyApp());}class MyApp extends StatelessWidget {  const MyApp({super.key});  @override  Widget build(BuildContext context) {    ThemeMode themeMode = ThemeMode.dark;    return MaterialApp(      title: 'Password Manager',        debugShowCheckedModeBanner: false,      home: const MyHomePage(),      theme: ThemeData(colorScheme: lightColorScheme),      darkTheme: ThemeData(colorScheme: darkColorScheme),      themeMode: themeMode,    );  }}class MyHomePage extends StatefulWidget {  const MyHomePage({super.key});  @override  State<MyHomePage> createState() => _MyHomePageState();}class _MyHomePageState extends State<MyHomePage> {  var selectedIndex = 0;  @override  Widget build(BuildContext context) {    Widget page;    switch (selectedIndex) {      case 0:        page = const HomeScreen();        break;      case 1:        page = PasswordsPage();        break;      default:        throw UnimplementedError('no widget for $selectedIndex');    }    return Scaffold(      body: Row(        children: [          SafeArea(            child: NavigationRail(              extended: false,              destinations: const [                NavigationRailDestination(                  icon: Icon(Icons.home),                  label: Text('Home'),                ),                NavigationRailDestination(                  icon: Icon(Icons.password),                  label: Text('Favorites'),                ),              ],              selectedIndex: selectedIndex,              onDestinationSelected: (value) {                setState(() {                  selectedIndex = value;                });              },            ),          ),          Expanded(            child: Container(              color: Theme.of(context).colorScheme.primaryContainer,              child: page,            ),          ),        ],      ),    );  }}class HomeScreen extends StatefulWidget {  const HomeScreen({super.key});  @override  State<HomeScreen> createState() => _HomeScreenState();}class _HomeScreenState extends State<HomeScreen> {  final websiteController = TextEditingController();  final userNameController = TextEditingController();  final emailController = TextEditingController();  final passwordController = TextEditingController();  void searchFn(BuildContext context) async {    final directory = await getApplicationDocumentsDirectory();    String dirString = directory.toString();    String newdirString = dirString        .replaceAll("Directory", "")        .replaceAll("'", "")        .replaceAll(":", "")        .replaceAll(" ", "");    var path = "$newdirString/.pass.db";    var db = await openDatabase(      path,      version: 1,      onCreate: (db, version) async {        await db.execute('''        CREATE TABLE demo (          Website TEXT PRIMARY KEY,          Username TEXT,          Email TEXT,          Password TEXT        )      ''');      },    );    var list = await db.rawQuery("SELECT Website FROM demo");    List<String> allWebsites = [];    for (var l = 0; l < list.length; l++) {      allWebsites.add(list[l]['Website'].toString());    }    var correctWeb = extractOne(      query: websiteController.text,      choices: allWebsites,    );    var result = await db.rawQuery("SELECT * FROM demo WHERE Website=?", [      correctWeb.choice,    ]);    print(result);    showDialog(      context: context,      builder: (BuildContext context) {        return SizedBox(          child: AlertDialog(            title: Text("${result[0]['Website']}"),            actions: [              Column(                children: [                  TextButton(                    onPressed: () {                      Clipboard.setData(                        ClipboardData(text: result[0]['Email'].toString()),                      );                    },                    child: Text("Email: ${result[0]['Email']}"),                  ),                  TextButton(                    onPressed: () {                      Clipboard.setData(                        ClipboardData(text: result[0]['Password'].toString()),                      );                    },                    child: Text("Password: ${result[0]['Password']}"),                  ),                  TextButton(                    onPressed: () {                      Clipboard.setData(                        ClipboardData(text: result[0]['Username'].toString()),                      );                    },                    child: Text("Username: ${result[0]['Username']}"),                  ),                  Padding(                    padding: const EdgeInsets.all(8.0),                    child: ElevatedButton(                      onPressed: () {                        Navigator.of(context).pop();                      },                      style: ButtonStyle(                        backgroundColor: WidgetStatePropertyAll<Color>(                          Theme.of(context).colorScheme.secondary,                        ),                      ),                      child: Text("Ok"),                    ),                  ),                ],              ),            ],          ),        );      },    );  }  void generatePassword() {    var pass = [];    var letters = <String>[      'a',      'b',      'c',      'd',      'e',      'f',      'g',      'h',      'i',      'j',      'k',      'l',      'm',      'n',      'o',      'p',      'q',      'r',      's',      't',      'u',      'v',      'w',      'x',      'y',      'z',    ];    var numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];    var specialChars = ['!', '@', '#', '<', '%', '^', '&'];    var numLetters = Random().nextInt(9) + 5;    var numNumbers = Random().nextInt(16 - numLetters) + 4;    var numSpecialChars = Random().nextInt(20 - (numNumbers + numLetters)) + 3;    for (var i = 0; i < numLetters; i++) {      var randomNo = Random().nextInt(25);      var randomizedUppercase = Random().nextInt(2);      if (randomizedUppercase == 0) {        pass.add(letters[randomNo].toUpperCase());      } else {        pass.add(letters[randomNo]);      }    }    for (var j = 0; j < numNumbers; j++) {      var randomNum = Random().nextInt(9);      pass.add(numbers[randomNum]);    }    for (var k = 0; k < numSpecialChars; k++) {      var randomNumb = Random().nextInt(6);      pass.add(specialChars[randomNumb]);    }    pass.shuffle();    print(pass);    String password = pass.join('');    passwordController.text = password;    Clipboard.setData(ClipboardData(text: password));  }  void emailGenerator() async {    final dio = Dio();    const String authKey =        'Bearer frl3vgpocyfgfpu3swenwhgk8wsty6ju6mh08od1f82zsieiihk6pabyvqx4ro'; // Replace with actual key    final headers = {      'Accept': '*/*',      'Accept-Encoding': 'gzip, deflate, br',      'Accept-Language': 'en-US,en;q=0.5',      'Authorization': authKey,      'Connection': 'keep-alive',      'Content-Length': '0',      'DNT': '1',      'Host': 'quack.duckduckgo.com',      'Origin': 'https://duckduckgo.com',      'Referer': 'https://duckduckgo.com/',      'Sec-Fetch-Dest': 'empty',      'Sec-Fetch-Mode': 'cors',      'Sec-Fetch-Site': 'same-site',      'Sec-GPC': '1',      'TE': 'trailers',    };    var emailAddr = "";    try {      Response response = await dio.post(        "https://quack.duckduckgo.com/api/email/addresses",        options: Options(headers: headers),      );      emailAddr =          '${response.data['address']}'          '@duck.com';    } catch (e) {      print('Error: $e');    }    emailController.text = emailAddr;    Clipboard.setData(ClipboardData(text: emailAddr));  }  void addData(BuildContext context) async {    final directory = await getApplicationDocumentsDirectory();    String dirString = directory.toString();    String newdirString = dirString        .replaceAll("Directory", "")        .replaceAll("'", "")        .replaceAll(":", "")        .replaceAll(" ", "");    var path = "$newdirString/.pass.db";    print(path);    var db = await openDatabase(      path,      version: 1,      onCreate: (db, version) async {        await db.execute('''        CREATE TABLE demo (          Website TEXT PRIMARY KEY,          Username TEXT,          Email TEXT,          Password TEXT        )      ''');      },    );    var website = websiteController.text;    var username = userNameController.text;    var email = emailController.text;    var password = passwordController.text;    await db.insert('demo', {      'Website': website,      'Username': username,      'Email': email,      'Password': password,    }, conflictAlgorithm: ConflictAlgorithm.replace);    print("Data inserted.");    showDialog(      context: context,      builder: (BuildContext context) {        return AlertDialog(          title: Text("Success"),          content: Text("The details have been saved."),          actions: [            TextButton(              onPressed: () => Navigator.of(context).pop(),              child: Text("OK"),            ),          ],        );      },    );    websiteController.text = "";    userNameController.text = "";    emailController.text = "";    passwordController.text = "";  }  @override  Widget build(BuildContext context) {    return Container(      height: double.infinity,      child: SingleChildScrollView(child: Column(          children: [            Row(              mainAxisAlignment: MainAxisAlignment.start,              children: [                Padding(                  padding: const EdgeInsets.fromLTRB(16.0, 60.0, 0, 0),                  child: Text(                    "Add Details",                    style: GoogleFonts.bricolageGrotesque(                      fontWeight: FontWeight.bold,                      fontSize: 25,                    ),                  ),                ),              ],            ),            Padding(              padding: const EdgeInsets.fromLTRB(0, 50, 0, 50),              child: Center(                child: Row(                  mainAxisAlignment: MainAxisAlignment.center,                  children: [                    Flexible(                      child: OutlinedTextField(                        "Website",                        Icons.language,                        websiteController,                      ),                    ),                    FrontPageButtons("Search", () {                      searchFn(context);                    }),                  ],                ),              ),            ),            Padding(              padding: const EdgeInsets.fromLTRB(0, 30, 0, 50),              child: Center(                child: Row(                  mainAxisAlignment: MainAxisAlignment.center,                  children: [                    Flexible(                      child: OutlinedTextField(                        "Username",                        Icons.person,                        userNameController,                      ),                    ),                    FrontPageButtons("Search", () {                      searchFn(context);                    }),                  ],                ),              ),            ),            Padding(              padding: const EdgeInsets.fromLTRB(0, 30, 0, 70),              child: Center(                child: Row(                  mainAxisAlignment: MainAxisAlignment.center,                  children: [                    Flexible(                      child: OutlinedTextField(                        "Email",                        Icons.email,                        emailController,                      ),                    ),                    FrontPageButtons("Acquire", () {                      emailGenerator();                    }),                  ],                ),              ),            ),            Padding(              padding: const EdgeInsets.fromLTRB(0, 30, 0, 30),              child: Center(                child: Row(                  mainAxisAlignment: MainAxisAlignment.center,                  children: [                    Flexible(                      child: OutlinedTextField(                        "Password",                        Icons.password,                        passwordController,                      ),                    ),                    FrontPageButtons("Create", () {                      generatePassword();                    }),                  ],                ),              ),            ),            Padding(              padding: const EdgeInsets.fromLTRB(0, 25.0, 0, 0),              child: AnimatedButton(                width: MediaQuery.sizeOf(context).width - 130,                height: 70,                color: Color(0xffDA253C),                onPressed: () {                  addData(context);                },                child: Text(                  "Add",                  style: GoogleFonts.bricolageGrotesque(                    fontWeight: FontWeight.bold,                    fontSize: 23,                    color: Theme.of(context).colorScheme.onPrimaryContainer,                  ),                ),              ),            ),          ],        )),    );  }}class PasswordsPage extends StatelessWidget {  Future<List<Map<String, Object?>>> getDB() async {    final directory = await getApplicationDocumentsDirectory();    String dirString = directory.toString();    String newdirString = dirString        .replaceAll("Directory", "")        .replaceAll("'", "")        .replaceAll(":", "")        .replaceAll(" ", "");    var path = "$newdirString/.pass.db";    var db = await openDatabase(      path,      version: 1,      onCreate: (db, version) async {        await db.execute('''          CREATE TABLE demo (            Website TEXT PRIMARY KEY,            Username TEXT,            Email TEXT,            Password TEXT          )        ''');      },    );    var result = await db.rawQuery("SELECT * FROM demo");    return result;  }  void removeSite(String websiteToDelete) async {    final directory = await getApplicationDocumentsDirectory();    String dirString = directory.toString();    String newdirString = dirString        .replaceAll("Directory", "")        .replaceAll("'", "")        .replaceAll(":", "")        .replaceAll(" ", "");    var path = "$newdirString/.pass.db";    var db = await openDatabase(      path,      version: 1,      onCreate: (db, version) async {        await db.execute('''          CREATE TABLE demo (            Website TEXT PRIMARY KEY,            Username TEXT,            Email TEXT,            Password TEXT          )        ''');      },    );    var count = await db.rawDelete('DELETE FROM demo WHERE Website=?', [websiteToDelete]);  }  @override  Widget build(BuildContext context) {    return FutureBuilder<List<Map<String, Object?>>>(      future: getDB(),      builder: (context, snapshot) {        if (snapshot.connectionState == ConnectionState.waiting) {          return Center(child: CircularProgressIndicator());        } else if (snapshot.hasError) {          return Center(child: Text('Error: ${snapshot.error}'));        } else if (!snapshot.hasData || snapshot.data == 0) {          return Center(child: Text('No websites found!'));        } else {          // Use the data from the snapshot to build the list          int itemCount = snapshot.data!.length;          return ListView.builder(            itemCount: itemCount,            itemBuilder: (BuildContext context, int index) {              final website = snapshot.data![index]["Website"]?.toString();              final email = snapshot.data![index]["Email"].toString();              final password = snapshot.data![index]["Password"].toString();              final userName = snapshot.data![index]['Username'].toString();              return Padding(                padding: const EdgeInsets.symmetric(                  horizontal: 16,                  vertical: 8,                ),                child: Container(                  padding: EdgeInsets.all(16),                  decoration: BoxDecoration(                    color: Color(0xff000000),                    borderRadius: BorderRadius.circular(16),                  ),                  child: Column(                    crossAxisAlignment: CrossAxisAlignment.start,                    children: [                      // Title row with delete icon                      Row(                        mainAxisAlignment: MainAxisAlignment.spaceBetween,                        children: [                          Text(                            website!,                            style: GoogleFonts.bricolageGrotesque(                              fontSize: 20,                              fontWeight: FontWeight.bold,                              color: Theme.of(                                context,                              ).colorScheme.onPrimaryContainer,                            ),                          ),                          IconButton(                            icon: Icon(                              Icons.delete_outline,                              color: Theme.of(                                context,                              ).colorScheme.onPrimaryContainer,                            ),                            onPressed: () { removeSite(website);},                          ),                        ],                      ),                      SizedBox(height: 10),                      Boxes(identifier: userName, icon: Icons.person,),                      SizedBox(height: 15),                      Boxes(identifier: email, icon: Icons.email,),                      SizedBox(height: 15),                      Boxes(identifier: password, icon: Icons.password,),                      SizedBox(height: 15),                    ],                  ),                ),              );            },          );        }      },    );  }}class Boxes extends StatelessWidget {  const Boxes({super.key, required this.identifier, required this.icon});  final String identifier;  final IconData icon;  @override  Widget build(BuildContext context) {    return Container(      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 2),      decoration: BoxDecoration(        color: Theme.of(context).colorScheme.secondary,        borderRadius: BorderRadius.circular(12),      ),      child: Row(        mainAxisAlignment: MainAxisAlignment.spaceBetween,        children: [          Icon(icon),          Flexible(child: Padding(            padding: const EdgeInsets.fromLTRB(10, 0, 10, 0),            child: Text(identifier),          )),          IconButton(            onPressed: () {              Clipboard.setData(ClipboardData(text: identifier));            },            icon: Icon(Icons.copy),          ),        ],      ),    );  }}class OutlinedTextField extends StatelessWidget {  final String fieldName;  final IconData fieldIcon;  final TextEditingController controller;  const OutlinedTextField(this.fieldName, this.fieldIcon, this.controller);  @override  Widget build(BuildContext context) {    var theme = Theme.of(context).colorScheme;    return Padding(      padding: const EdgeInsets.fromLTRB(18.0, 0, 0, 0),      child: TextField(        controller: controller,        decoration: InputDecoration(          enabledBorder: OutlineInputBorder(            borderSide: const BorderSide(color: Colors.transparent),            borderRadius: BorderRadius.circular(5.5),          ),          focusedBorder: OutlineInputBorder(            borderSide: const BorderSide(color: Colors.transparent),            borderRadius: BorderRadius.circular(5.5),          ),          prefixIcon: Icon(fieldIcon, color: theme.onSecondary),          hintText: fieldName,          hintStyle: GoogleFonts.bricolageGrotesque(color: theme.onSecondary),          filled: true,          fillColor: Theme.of(context).colorScheme.secondary,        ),      ),    );  }}class FrontPageButtons extends StatelessWidget {  final String text;  final Function function;  const FrontPageButtons(this.text, this.function);  @override  Widget build(BuildContext context) {    return Padding(      padding: const EdgeInsets.fromLTRB(18.0, 0, 18.0, 0),      child: SizedBox(        width: 105,        height: 50,        child: Center(          child: AnimatedButton(            onPressed: () {              function();            },            color: Theme.of(context).colorScheme.secondary,            width: 105,            height: 50,            child: Text(              text,              style: GoogleFonts.bricolageGrotesque(                color: Theme.of(context).colorScheme.onSecondary,                fontWeight: FontWeight.bold,              ),            ),          ),        ),      ),    );  }}